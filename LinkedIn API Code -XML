
/**
 * @author Moni
 *
 */

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.scribe.builder.*;
import org.scribe.builder.api.*;
import org.scribe.model.*;
import org.scribe.oauth.*;
import org.w3c.dom.Element;
public class LinkedInExample
{
	// the person's connections information
  private static final String PROTECTED_RESOURCE_URL = "http://api.linkedin.com/v1/people/~/connections:(id,last-name,first-name,headline,location:(name,country:(code)),industry)";
 // the person's full profile
  private static final String PROTECTED_RESOURCE_URL1 = "http://api.linkedin.com/v1/people/~:(first-name,last-name,headline,industry,location:(name,country:(code)),current-status,skills,associations,interests,educations,courses,suggestions,following,three-current-positions,three-past-positions,certifications)";
  
  public static void main(String[] args) throws ParserConfigurationException, TransformerException, IOException
  {
    OAuthService service = new ServiceBuilder()
                                .provider(LinkedInApi.class)
                                .apiKey("nb5qla3avbpw")
                                .apiSecret("CZ2LCewkz3eXpaoj")
                                
                                .build();
    Scanner in = new Scanner(System.in);
    
    System.out.println("=== LinkedIn's OAuth Workflow ===");
    System.out.println();

    // Obtain the Request Token 
    System.out.println("Fetching the Request Token...");
    Token requestToken = service.getRequestToken();
    System.out.println("Got the Request Token!");
    System.out.println();

    System.out.println("Now go and authorize Scribe here:");
    System.out.println(service.getAuthorizationUrl(requestToken));
    System.out.println("And paste the verifier here");
    System.out.print(">>");
    Verifier verifier = new Verifier(in.nextLine());
    System.out.println();

    // Trade the Request Token and Verfier for the Access Token
    System.out.println("Trading the Request Token for an Access Token...");
    Token accessToken = service.getAccessToken(requestToken, verifier);
    System.out.println("Got the Access Token!");
    System.out.println("(if your curious it looks like this: " + accessToken + " )");
    System.out.println();

    // SAVING FIRST FILE 
    // Now let's go and ask for a protected resource!
    OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL1);
    service.signRequest(accessToken, request);
    Response response = request.send();
    System.out.println();
    System.out.println("Printing the data :");
    System.out.println(response.getBody());
    String content = response.getBody();  
    
	File file = new File("C:\\Users\\Moni\\Desktop\\740\\person_profile.xml");

	// if file doesn't exists, then create it
	if (!file.exists()) {
		file.createNewFile();
	}
	FileWriter fw = new FileWriter(file.getAbsoluteFile());
	BufferedWriter bw = new BufferedWriter(fw);
	bw.write(content);
	bw.close();
	
	// SAVING SECOND FILE 
    OAuthRequest request2 = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
    service.signRequest(accessToken, request2);
    Response response2 = request2.send();
    System.out.println();
    System.out.println("Printing the data :");
    System.out.println(response2.getBody());
    String content2 = response2.getBody();  
   
	File file2= new File("C:\\Users\\Moni\\Desktop\\740\\connections_profile.xml");
	// if file doesn't exists, then create it
	if (!file2.exists()) {
		file2.createNewFile();
	}
	FileWriter fw2 = new FileWriter(file2.getAbsoluteFile());
	BufferedWriter bw2 = new BufferedWriter(fw2);
	bw2.write(content2);
	bw2.close();


	System.out.println("Files saved!");
  }

}
